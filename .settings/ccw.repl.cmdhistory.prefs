cmdhistory=[";; Switching to clojure-in-action.core namespace" "(+ 1 2)" "(defn my-add [op1 op2] (+ op1 op2))" "(my-add 1 2)" "(defn cmp [op1 op2]\\n  (cond\\n    (> op1 op2) (println \\"greater\\")\\n    (< op1 op2) (println \\"lesser\\")\\n    \:default (println \\"equal\\")))\\n(cmp 1 2)" "(cmp  2 1)\\n" "(defn average-pets []\\n  (let [user-data (vals users)\\n        number-pets (map \:number-pets user-data)\\n        total (apply + number-pets)]\\n    (/ total (count users))))" "(let [quoted-list '(add 1 2 3)]\\n  quoted-list)" "(when (1 > 0)\\n  (println \\"hello\\")\\n  (println \\"world\\"))" "(when (true?)\\n  (println \\"hello\\")\\n  (println \\"world\\"))" "(when (true?[(1>0)])\\n  (println \\"hello\\")\\n  (println \\"world\\"))" "(when (true? (1>0))\\n  (println \\"hello\\")\\n  (println \\"world\\"))" "(when (> 1 0)\\n  (println \\"hello\\")\\n  (println \\"world\\"))" "(defn fact [n]\\n  (loop [current n \\n         val 1]\\n    (if (\= current 1)\\n      val\\n      (recur (dec current) (* val current)))))\\n(println (fact 10))" ";; Switching to clojure-in-action.core namespace" "(chess-labels)" "(defn chess-labels []\\n  (for [alpha \\"abcdefgh\\"\\n        num (range 1 20)\\n        \:when (< num 15)]\\n    (str alpha num)))\\n(chess-labels)" "(.split \\"hello world\\")" "(.split \\"hello world\\" \\" \\")" ";; Switching to clojure-in-action.core namespace" "\\n(def m {\:a 1 \:b 2 \:c 3})\\n(println (m \:b))"]
eclipse.preferences.version=1
